@{
    Layout = "~/_Layout.cshtml";
    Page.Title = string.Format("Razor - {0}", "CRUD - Update/Delete");



    var pid = Request.QueryString["pid"];
    if (pid.IsEmpty())
    {
        Response.Redirect("ProductSearch.cshtml");
    }
    var productid = Request.Form["ProductID"];
    var productname = Request.Form["ProductName"];
    var supplierid = Request.Form["SupplierList"];
    var categoryid = Request.Form["CategoryList"];
    var quantityperunit = Request.Form["QuantityPerUnit"];
    var unitprice = Request.Form["UnitPrice"];
    var unitsinstock = Request.Form["UnitsInStock"];
    var unitsonorder = Request.Form["UnitsOnOrder"];
    var reorderlevel = Request.Form["ReorderLevel"];
    var discontinued = Request.Form["Discontinued"];
    //capture which button was pressed
    var thebutton = Request.Form["theButton"];

    if (IsPost)
    {
        //discontinued is a checkbox
        //the possible values from the check box is null (not checked) or "on" (checked)
        //the acceptable sql values for a bit are 0 and 1
        if (discontinued == null)
        {
            discontinued = "0";
        }
        else
        {
            discontinued = "1";
        }
    }
    else
    {
        productid = pid;
        discontinued = "0";
    }
    var db = Database.Open("NWDB");
    var supplierStatement = "SELECT SupplierID, CompanyName "
                       + "FROM Suppliers "
                       + "ORDER BY CompanyName";
    var querySuppliers = db.Query(supplierStatement);
    var categoryStatement = "SELECT CategoryID, CategoryName "
                       + "FROM Categories "
                       + "ORDER BY CategoryName";
    var queryCategories = db.Query(categoryStatement);
    var queryStatement = "SELECT ProductID, ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued "
                        + "FROM Products "
                        + "WHERE ProductID = @0";
    var queryProducts = db.QuerySingle(queryStatement, pid);
}

@section head{
    <link href="~/Content/MySpacing.css" rel="stylesheet" />
}

@section banner{
    <h1>Product Edit - Update and Delete</h1>
}
@if (IsPost)
{
    if (thebutton.Equals("cancel"))
    {
        //options
        //a) redirect to the search page
        //b) msg to the user
        //   redirect link to the search page
        //   clear the fields
        productid = "";
        productname = "";
        supplierid = "0";
        categoryid = "0";
        quantityperunit = "";
        unitprice = "";
        unitsinstock = "";
        unitsonorder = "";
        reorderlevel = "";
        discontinued = "0";
        <div class="col-12 text-center">
            <p>
                <span style="color:brown">
                    Action cancelled. Return to product search for new product.
                </span>
                <a href="~/SamplePages/ProductSearch.cshtml"> go to search ....</a>
            </p>
        </div>

    }
    else if (thebutton.Equals("delete"))
    {
        // this demo does not include the expect client side validation code
        // if this demo did include the validatin code, the following would be
        //    within a Validation.IsValid() test

        //you may have logical validation needed for your data that cannot
        //be accomplished using Validation Controls or HTML5
        //this type of validation is a programmed validation

        //assume that the categoryid is a required field
        var valid = true;
       
        if (string.IsNullOrEmpty(productid))
        {
            valid = false;
            <div class="col-12 text-center">
                <p>
                    <span style="color:brown">
                        Missing Product ID. Return to product search for new product.
                    </span>
                    <a href="~/SamplePages/ProductSearch.cshtml"> go to search ....</a>
                </p>
            </div>
        }

        //check validation result
        if (valid)
        {
            //good data
            try
            {
                //connect to the database
                //  done above
                //create sql command

                //physical delete which removes a record from the databas
                //var sqlcommand = @"Delete Products
                //                   WHERE ProductId = @0";

                //logical delete which set an attribute to some value to indicate
                //  the record should be ignored
                //then do an Update to the database
                var sqlcommand = @"UPDATE Products SET
                            Discontinued = 1
                            WHERE ProductID = @0";
                //execute the command
                var rowsaffected = db.Execute(sqlcommand,  productid);
                if (rowsaffected > 0)
                {
                    discontinued = "1";
                    productid = "";
                    <div class="col-12 text-center">
                        <p style="color:green">
                            Product has been discontinued
                        </p>
                    </div>
                }
                else
                {
                    <div class="col-12 text-center">
                        <p>
                            <span style="color:brown">
                                Product not found on file. Discontinued not done. Return to product search for new product.
                            </span>
                            <a href="~/SamplePages/ProductSearch.cshtml"> go to search ....</a>
                        </p>
                    </div>
                }

            }
            catch (Exception ex)
            {
                <div class="col-12 text-center">
                    <p style="color:firebrick; font-size:large">
                        Processing error: @ex.Message
                    </p>
                </div>
            }
        }
    }
    else
    {
        // this demo does not include the expect client side validation code
        // if this demo did include the validatin code, the following would be
        //    within a Validation.IsValid() test

        //you may have logical validation needed for your data that cannot
        //be accomplished using Validation Controls or HTML5
        //this type of validation is a programmed validation

        //assume that the categoryid is a required field
        var valid = true;
        if (categoryid.Equals("0"))
        {
            valid = false;
            <div class="col-12 text-center">
                <p style="color:darkslateblue">
                    You must select a category
                </p>
            </div>
        }
        if (string.IsNullOrEmpty(productid))
        {
            valid = false;
            <div class="col-12 text-center">
                <p>
                    <span style="color:brown">
                        Missing Product ID. Return to product search for new product.
                    </span>
                    <a href="~/SamplePages/ProductSearch.cshtml"> go to search ....</a>
                </p>
            </div>
        }

        //check validation result
        if (valid)
        {
            //good data
            try
            {
                //connect to the database
                //  done above
                //create sql command
                var sqlcommand = @"UPDATE Products SET
ProductName = @0,
SupplierID = @1,
CategoryID = @2,
QuantityPerUnit = @3,
UnitPrice = @4,
UnitsInStock = @5,
UnitsOnOrder = @6,
ReorderLevel = @7,
Discontinued = @8
WHERE ProductID = @9";
                //execute the command
                var rowsaffected = db.Execute(sqlcommand, productname,
                    supplierid.Equals("0") ? null : supplierid,
                    categoryid.Equals("0") ? null : categoryid,
                    string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                    string.IsNullOrEmpty(unitprice) ? null : unitprice,
                    string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                    string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                    string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel,
                    discontinued, productid);
                if (rowsaffected > 0)
                {
                    <div class="col-12 text-center">
                        <p style="color:green">
                            Product has been updated
                        </p>
                    </div>
                }
                else
                {
                    <div class="col-12 text-center">
                        <p>
                            <span style="color:brown">
                                Product not found on file. Update not done. Return to product search for new product.
                            </span>
                            <a href="~/SamplePages/ProductSearch.cshtml"> go to search ....</a>
                        </p>
                    </div>
                }

            }
            catch (Exception ex)
            {
                <div class="col-12 text-center">
                    <p style="color:firebrick; font-size:large">
                        Processing error: @ex.Message
                    </p>
                </div>
            }
        }

    }
}
else //for IsPost
{
    //if this page is being shown for the "first time"
    //the page accesses the database for the current record
    //to display to the user
    queryProducts = db.QuerySingle(queryStatement, pid);

    //moving the current record data to the form controls
    //NEVER code to the data supplied
    //the Products table on the Northwind database does not
    //  have a record where the nullable fields are actual null
    //the following code takes into account fields which actually
    //  maybe null
    productid = queryProducts.ProductID.ToString();
    productname = queryProducts.ProductName;
    supplierid = queryProducts.SupplierID == null ? "0" : queryProducts.SupplierID.ToString();
    categoryid = queryProducts.CategoryID == null ? "0" : queryProducts.CategoryID.ToString();
    quantityperunit = queryProducts.QuantityPerUnit;
    unitprice = queryProducts.UnitPrice == null ? "" : queryProducts.UnitPrice.ToString();
    unitsinstock = queryProducts.UnitsInStock == null ? "" : queryProducts.UnitsInStock.ToString();
    unitsonorder = queryProducts.UnitsOnOrder == null ? "" : queryProducts.UnitsOnOrder.ToString();
    reorderlevel = queryProducts.ReorderLevel == null ? "" : queryProducts.ReorderLevel.ToString();
    discontinued = queryProducts.Discontinued.ToString();//from sql 0/1
}
<div class="form-group">

    <form id="theForm" action="" method="post">
        <div class="row">
            <div class="col-6 text-right">
                <label id="lblProductID" for="ProductID">Product ID</label><br />
                <label id="lblProductName" for="ProductName">Product Name</label><br />
                <label id="lblSupplierList" for="SupplierList">Supplier</label><br />
                <label id="lblCategoryList" for="CatgoryList">Category</label><br />
                <label id="lblQuantityPerUnit" for="QuasntityPerUnit">Quantity Per Unit</label><br />
                <label id="lblUnitPrice" for="UnitPrice">Unit Price</label><br />
                <label id="lblUnitsInStock" for="UnitsInStock">Units In Stock</label><br />
                <label id="lblUnitsOnOrder" for="UnitsOnOrder">Units On Order</label><br />
                <label id="lblReorderLevel" for="ReorderLevel">ReorderLevel</label><br />
                <label id="lblDiscontinued" for="Discontinued">Discontinued</label><br />
            </div>
            <div class="col-6 text-left">
                <input type="text" name="ProductID" value="@productid" readonly /><br />
                <input type="text" name="ProductName" value="@productname" /><br />
                <select name="SupplierList">
                    <option value="0">select...</option>
                    @foreach (var acollectionrow in querySuppliers)
                    {
                        if (acollectionrow.SupplierID.ToString() == supplierid)
                        {
                            <option value="@acollectionrow[0]" selected>@acollectionrow[1]</option>
                        }
                        else
                        {
                            <option value="@acollectionrow[0]">@acollectionrow[1]</option>
                        }
                    }
                </select><br />
                <select name="CategoryList">
                    <option value="0">select...</option>
                    @foreach (var acollectionrow in queryCategories)
                    {
                        if (acollectionrow.CategoryID.ToString() == categoryid)
                        {
                            <option value="@acollectionrow[0]" selected>@acollectionrow[1]</option>
                        }
                        else
                        {
                            <option value="@acollectionrow[0]">@acollectionrow[1]</option>
                        }
                    }
                </select><br />
                <input type="text" name="QuantityPerUnit" value="@quantityperunit" /><br />
                <input type="number" name="UnitPrice" value="@unitprice" min="0.00" step="0.01" /><br />
                <input type="number" name="UnitsInStock" value="@unitsinstock" min="0" max="32767" step="1" /><br />
                <input type="number" name="UnitsOnOrder" value="@unitsonorder" min="0" max="32767" step="1" /><br />
                <input type="number" name="ReorderLevel" value="@reorderlevel" min="0" max="32767" step="1" /><br />
                @if (discontinued.Equals("True") || (discontinued == "1"))
                {
                    <input type="checkbox" name="Discontinued" checked value="1" /><br /><br />
                }
                else
                {
                    <input type="checkbox" name="Discontinued" value="0" /><br /><br />
                }
            </div>
        </div>
        <div class="row">
            <div class="col-12 text-center">
                <button type="submit" name="theButton" id="theUpdate" class="btn btn-primary" 
                        value="update">Update</button>&nbsp;&nbsp;&nbsp;
                <button type="submit" name="theButton" id="theDelete" class="btn btn-primary"  formnovalidate
                        value="delete">Discontinued</button>&nbsp;&nbsp;&nbsp;
                <button type="submit" name="theButton" id="theCancel" class="btn btn-primary" formnovalidate 
                        value="cancel">Cancel</button>
            </div>
        </div>
        @* confirmation can be done on a button click using javascript
            we will ask the user to confirm the discontinuing of a product*@
        <script type="text/javascript">
            document.getElementById("theDelete").onclick = ConfirmDelete;
            function ConfirmDelete() {
                return confirm("Are you sure you want to discontinue @productname?");
            }
        </script>
    </form>
</div>
